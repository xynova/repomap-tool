name: Nightly Build

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/nightly.yml'
      - '.github/scripts/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/nightly.yml'
      - '.github/scripts/**'

jobs:
  nightly-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: nightly-${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          nightly-${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"

    - name: Run comprehensive tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --durations=10

    - name: Run linting and type checking
      run: |
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        black --check src/ tests/ --line-length=88
        mypy src/ --config-file pyproject.toml

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.python-version }}
        path: htmlcov/

  nightly-docker:
    runs-on: ubuntu-latest
    needs: nightly-test
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate image tags
      id: tags
      run: |
        # Create nightly tag with date
        DATE_TAG=$(date +%Y%m%d)
        echo "nightly_tag=ghcr.io/${{ github.repository }}:nightly-$DATE_TAG" >> $GITHUB_OUTPUT
        echo "nightly_latest=ghcr.io/${{ github.repository }}:nightly" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ steps.tags.outputs.nightly_tag }}
          ${{ steps.tags.outputs.nightly_latest }}

    - name: Test Docker image
      run: |
        # Pull the image we just pushed to test it
        docker pull ${{ steps.tags.outputs.nightly_latest }}
        
        # Test basic functionality
        docker run --rm ${{ steps.tags.outputs.nightly_latest }} repomap-tool --help
        
        # Test with a more complex project structure
        mkdir -p nightly-test-project
        mkdir -p nightly-test-project/src
        mkdir -p nightly-test-project/tests
        
        echo "def hello(): print('Hello, World!')" > nightly-test-project/src/main.py
        echo "def test_hello(): assert True" > nightly-test-project/tests/test_main.py
        echo "# Test project for nightly builds" > nightly-test-project/README.md
        
        # Run analysis on the test project
        docker run --rm \
          -v $(pwd)/nightly-test-project:/workspace \
          -w /workspace \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool analyze . --output-format json || true

    - name: Cleanup
      run: |
        docker rmi ${{ steps.tags.outputs.nightly_latest }} || true
        rm -rf nightly-test-project

  nightly-api-test:
    runs-on: ubuntu-latest
    needs: nightly-test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install API dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r src/repomap_tool/api/requirements-api.txt

    - name: Test API functionality
      run: |
        # Test if API modules can be imported
        python -c "from repomap_tool.api import api_server; print('API server module imported successfully')" || true
        
        # Test if client example can be imported
        python -c "from repomap_tool.api import client_example; print('Client example module imported successfully')" || true

  nightly-report:
    runs-on: ubuntu-latest
    needs: [nightly-test, nightly-docker, nightly-api-test]
    if: always()

    steps:
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        path: coverage/

    - name: Generate nightly report
      run: |
        echo "## Nightly Build Report - $(date)" >> nightly-report.md
        echo "" >> nightly-report.md
        echo "### Test Results" >> nightly-report.md
        echo "- Python 3.9: ${{ needs.nightly-test.result }}" >> nightly-report.md
        echo "- Python 3.11: ${{ needs.nightly-test.result }}" >> nightly-report.md
        echo "" >> nightly-report.md
        echo "### Docker Build" >> nightly-report.md
        echo "- Status: ${{ needs.nightly-docker.result }}" >> nightly-report.md
        echo "" >> nightly-report.md
        echo "### API Tests" >> nightly-report.md
        echo "- Status: ${{ needs.nightly-api-test.result }}" >> nightly-report.md

    - name: Upload nightly report
      uses: actions/upload-artifact@v4
      with:
        name: nightly-report
        path: nightly-report.md
