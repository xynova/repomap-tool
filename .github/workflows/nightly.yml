name: Nightly Build

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/nightly.yml'
      - '.github/scripts/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/nightly.yml'
      - '.github/scripts/**'

jobs:
  nightly-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: nightly-${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          nightly-${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        make install

    - name: Run comprehensive tests
      run: |
        make nightly

    - name: Run linting and type checking
      run: |
        make lint
        make mypy

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.python-version }}
        path: htmlcov/

  nightly-docker:
    runs-on: ubuntu-latest
    needs: nightly-test
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate image tags
      id: tags
      run: |
        # Create nightly tag with date
        DATE_TAG=$(date +%Y%m%d)
        echo "nightly_tag=ghcr.io/${{ github.repository }}:nightly-$DATE_TAG" >> $GITHUB_OUTPUT
        echo "nightly_latest=ghcr.io/${{ github.repository }}:nightly" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ steps.tags.outputs.nightly_tag }}
          ${{ steps.tags.outputs.nightly_latest }}

    - name: Test Docker image
      run: |
        # Pull the image we just pushed to test it
        docker pull ${{ steps.tags.outputs.nightly_latest }}
        
        echo "ðŸ§ª Running comprehensive nightly Docker integration tests..."
        
        # Test 1: Basic functionality
        echo "ðŸ“‹ Test 1: Basic functionality"
        docker run --rm ${{ steps.tags.outputs.nightly_latest }} repomap-tool --help
        
        # Test 2: Small test project analysis
        echo "ðŸ“‹ Test 2: Small test project analysis"
        docker run --rm ${{ steps.tags.outputs.nightly_latest }} bash -c "
          mkdir -p /tmp/nightly-test-project
          echo 'def hello_world():' > /tmp/nightly-test-project/test.py
          echo '    print(\"Hello, World!\")' >> /tmp/nightly-test-project/test.py
          echo 'class TestClass:' >> /tmp/nightly-test-project/test.py
          echo '    def __init__(self):' >> /tmp/nightly-test-project/test.py
          echo '        self.value = 42' >> /tmp/nightly-test-project/test.py
          cd /tmp/nightly-test-project
          repomap-tool analyze . --output json
        "
        
        # Test 3: Real codebase analysis
        echo "ðŸ“‹ Test 3: Real codebase analysis"
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool analyze /project --output json
        
        # Test 4: Search functionality
        echo "ðŸ“‹ Test 4: Search functionality"
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool search /project "analyze_project" --output json
        
        # Test 5: Fuzzy matching
        echo "ðŸ“‹ Test 5: Fuzzy matching"
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool search /project "FuzzyMatcher" --output json
        
        # Test 6: Semantic matching
        echo "ðŸ“‹ Test 6: Semantic matching"
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool search /project "semantic" --output json
        
        echo "âœ… All nightly Docker integration tests completed successfully!"

    - name: Run full nightly Docker test suite
      run: |
        echo "ðŸ§ª Running full nightly Docker test suite..."
        
        # Make the test scripts executable
        chmod +x tests/integration/test_integrated_adaptive.sh
        chmod +x tests/integration/test_docker_real_codebase.sh
        
        # Test 7: Comprehensive real codebase analysis
        echo "ðŸ“‹ Test 7: Comprehensive real codebase analysis"
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool analyze /project --semantic --threshold 0.05 --verbose --output json
        
        # Test 8: Comprehensive search tests
        echo "ðŸ“‹ Test 8: Comprehensive search tests"
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool search /project "DockerRepoMap" --match-type hybrid --threshold 0.5 --verbose --output json
        
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool search /project "analyze_project" --match-type fuzzy --threshold 0.6 --verbose --output json
        
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool search /project "FuzzyMatcher" --match-type fuzzy --threshold 0.5 --verbose --output json
        
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool search /project "SemanticMatcher" --match-type fuzzy --threshold 0.5 --verbose --output json
        
        # Test 9: Advanced analysis modes
        echo "ðŸ“‹ Test 9: Advanced analysis modes"
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool analyze /project --fuzzy --threshold 0.6 --verbose --output json
        
        docker run --rm \
          -v $(pwd):/project \
          ${{ steps.tags.outputs.nightly_latest }} \
          repomap-tool analyze /project --fuzzy --semantic --threshold 0.1 --verbose --output json
        
        echo "âœ… Full nightly Docker test suite completed successfully!"

    - name: Cleanup
      run: |
        docker rmi ${{ steps.tags.outputs.nightly_latest }} || true

  nightly-api-test:
    runs-on: ubuntu-latest
    needs: nightly-test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install API dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r src/repomap_tool/api/requirements-api.txt

    - name: Test API functionality
      run: |
        # Test if API modules can be imported
        python -c "from repomap_tool.api import api_server; print('API server module imported successfully')" || true
        
        # Test if client example can be imported
        python -c "from repomap_tool.api import client_example; print('Client example module imported successfully')" || true

  nightly-report:
    runs-on: ubuntu-latest
    needs: [nightly-test, nightly-docker, nightly-api-test]
    if: always()

    steps:
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        path: coverage/

    - name: Generate nightly report
      run: |
        echo "## Nightly Build Report - $(date)" >> nightly-report.md
        echo "" >> nightly-report.md
        echo "### Test Results" >> nightly-report.md
        echo "- Python 3.11: ${{ needs.nightly-test.result }}" >> nightly-report.md
        echo "" >> nightly-report.md
        echo "### Docker Build" >> nightly-report.md
        echo "- Status: ${{ needs.nightly-docker.result }}" >> nightly-report.md
        echo "" >> nightly-report.md
        echo "### API Tests" >> nightly-report.md
        echo "- Status: ${{ needs.nightly-api-test.result }}" >> nightly-report.md

    - name: Upload nightly report
      uses: actions/upload-artifact@v4
      with:
        name: nightly-report
        path: nightly-report.md
