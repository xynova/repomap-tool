name: Docker Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/docker-build.yml'
      - '.github/scripts/cleanup_docker_images.sh'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docker/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/docker-build.yml'
      - '.github/scripts/cleanup_docker_images.sh'
  workflow_dispatch: # Allow manual triggering

# Concurrency control - cancel in-progress workflows from the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.tags.outputs.full_tag }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate image tags
      id: tags
      run: |
        # Create tags with date and commit SHA for easy expiration
        DATE_TAG=$(date +%Y%m%d-%H%M%S)
        COMMIT_TAG=${GITHUB_SHA::8}
        echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT
        echo "commit_tag=$COMMIT_TAG" >> $GITHUB_OUTPUT
        echo "full_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$DATE_TAG-$COMMIT_TAG" >> $GITHUB_OUTPUT
        echo "latest_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('docker/Dockerfile', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Output image tag for next job
      run: |
        echo "image_tag=${{ steps.tags.outputs.full_tag }}" >> $GITHUB_OUTPUT

  docker-test:
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      contents: read
      packages: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        make install

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image for testing
      run: |
        docker pull ${{ needs.docker-build.outputs.image_tag }}

    - name: Run Docker tests using make targets
      run: |
        # Set the Docker image tag for make targets
        export DOCKER_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        export DOCKER_TAG="${{ needs.docker-build.outputs.date_tag }}-${{ needs.docker-build.outputs.commit_tag }}"
        
        # Run the comprehensive Docker tests
        make docker-test-ci

    - name: Cleanup Docker image
      run: |
        docker rmi ${{ needs.docker-build.outputs.image_tag }} || true

  cleanup-old-images:
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup GitHub CLI
      run: |
        # Install GitHub CLI
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
    
    - name: Authenticate with GitHub
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    
    - name: Cleanup old Docker images
      run: |
        echo "Cleaning up Docker images older than 7 days..."
        echo "Current image: ${{ needs.docker-build.outputs.image_tag }}"
        # Run cleanup script (keep images for 7 days)
        ./.github/scripts/cleanup_docker_images.sh 7
