name: Docker Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker/**'
      - 'src/**'
      - 'pyproject.toml'
      - 'setup.py'
      - '.github/workflows/docker-build.yml'
      - '.github/scripts/cleanup_docker_images.sh'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docker/**'
      - 'src/**'
      - 'pyproject.toml'
      - 'setup.py'
      - '.github/workflows/docker-build.yml'
      - '.github/scripts/cleanup_docker_images.sh'
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.tags.outputs.full_tag }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate image tags
      id: tags
      run: |
        # Create tags with date and commit SHA for easy expiration
        DATE_TAG=$(date +%Y%m%d-%H%M%S)
        COMMIT_TAG=${GITHUB_SHA::8}
        echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT
        echo "commit_tag=$COMMIT_TAG" >> $GITHUB_OUTPUT
        echo "full_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$DATE_TAG-$COMMIT_TAG" >> $GITHUB_OUTPUT
        echo "latest_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ steps.tags.outputs.full_tag }}
          ${{ steps.tags.outputs.latest_tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Test Docker image locally
      run: |
        # Pull the image we just pushed to test it
        docker pull ${{ steps.tags.outputs.full_tag }}
        docker run --rm ${{ steps.tags.outputs.full_tag }} repomap-tool --help

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Output image tag for next job
      run: |
        echo "image_tag=${{ steps.tags.outputs.full_tag }}" >> $GITHUB_OUTPUT

  docker-integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      contents: read
      packages: read

    steps:
    - uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image for integration tests
      run: |
        docker pull ${{ needs.docker-build.outputs.image_tag }}

    - name: Run comprehensive Docker integration tests
      run: |
        echo "ðŸ§ª Running comprehensive Docker integration tests..."
        
        # Test 1: Basic functionality
        echo "ðŸ“‹ Test 1: Basic functionality"
        docker run --rm ${{ needs.docker-build.outputs.image_tag }} repomap-tool --help
        
        # Test 2: Small test project (make test-docker equivalent)
        echo "ðŸ“‹ Test 2: Small test project analysis"
        docker run --rm ${{ needs.docker-build.outputs.image_tag }} bash -c "
          mkdir -p /tmp/test-project
          echo 'def hello_world():' > /tmp/test-project/test.py
          echo '    print(\"Hello, World!\")' >> /tmp/test-project/test.py
          echo 'class TestClass:' >> /tmp/test-project/test.py
          echo '    def __init__(self):' >> /tmp/test-project/test.py
          echo '        self.value = 42' >> /tmp/test-project/test.py
          cd /tmp/test-project
          repomap-tool analyze . --output json
        "
        
        # Test 3: Real codebase analysis (make test-docker-real equivalent)
        echo "ðŸ“‹ Test 3: Real codebase analysis"
        docker run --rm \
          -v $(pwd):/project \
          ${{ needs.docker-build.outputs.image_tag }} \
          repomap-tool analyze /project --output json
        
        # Test 4: Search functionality
        echo "ðŸ“‹ Test 4: Search functionality"
        docker run --rm \
          -v $(pwd):/project \
          ${{ needs.docker-build.outputs.image_tag }} \
          repomap-tool search /project "analyze_project" --output json
        
        # Test 5: Fuzzy matching
        echo "ðŸ“‹ Test 5: Fuzzy matching"
        docker run --rm \
          -v $(pwd):/project \
          ${{ needs.docker-build.outputs.image_tag }} \
          repomap-tool search /project "FuzzyMatcher" --output json
        
        # Test 6: Semantic matching
        echo "ðŸ“‹ Test 6: Semantic matching"
        docker run --rm \
          -v $(pwd):/project \
          ${{ needs.docker-build.outputs.image_tag }} \
          repomap-tool search /project "semantic" --output json
        
        echo "âœ… All Docker integration tests completed successfully!"

    - name: Run full Docker test suite
      run: |
        echo "ðŸ§ª Running full Docker test suite..."
        
        # Make the test scripts executable
        chmod +x tests/integration/test_integrated_adaptive.sh
        chmod +x tests/integration/test_docker_real_codebase.sh
        
        # Run the comprehensive Docker integration test against real codebase
        docker run --rm \
          -v $(pwd):/project \
          -w /project \
          ${{ needs.docker-build.outputs.image_tag }} \
          bash -c "
            # Install make if not available
            if ! command -v make &> /dev/null; then
              apt-get update && apt-get install -y make
            fi
            
            # Run the full test suite
            make test-docker-real
          "

    - name: Cleanup
      run: |
        docker rmi ${{ needs.docker-build.outputs.image_tag }} || true

  cleanup-old-images:
    runs-on: ubuntu-latest
    needs: [docker-build, docker-integration-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup GitHub CLI
      run: |
        # Install GitHub CLI
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
    
    - name: Authenticate with GitHub
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    
    - name: Cleanup old Docker images
      run: |
        echo "Cleaning up Docker images older than 7 days..."
        echo "Current image: ${{ needs.docker-build.outputs.image_tag }}"
        # Run cleanup script (keep images for 7 days)
        ./.github/scripts/cleanup_docker_images.sh 7
