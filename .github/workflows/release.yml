name: Release

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest

    - name: Get nightly validated image
      id: get-image
      run: |
        # Get the most recent nightly validated image from the registry
        # This assumes the nightly workflow has already built and pushed a validated image
        NIGHTLY_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly"
        
        # Pull the nightly image to ensure we have it locally
        echo "Pulling nightly image: $NIGHTLY_IMAGE"
        if ! docker pull $NIGHTLY_IMAGE; then
          echo "Error: Failed to pull nightly image. Make sure the nightly workflow has run successfully."
          echo "You can manually trigger the nightly workflow to build a validated image."
          exit 1
        fi
        
        # Get the image digest for reference
        DIGEST=$(docker images --digests --format "table {{.Digest}}" | grep -v DIGEST | head -1)
        echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT
        echo "source_image=$NIGHTLY_IMAGE" >> $GITHUB_OUTPUT

    - name: Tag and push release images
      run: |
        SOURCE_IMAGE="${{ steps.get-image.outputs.source_image }}"
        
        # Tag the validated image with release tags
        echo "Available tags: ${{ steps.meta.outputs.tags }}"
        
        # Split the tags string (space-separated) and process each tag
        read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
        for TAG in "${TAGS[@]}"; do
          if [ -n "$TAG" ]; then
            echo "Tagging $SOURCE_IMAGE as $TAG"
            docker tag $SOURCE_IMAGE $TAG
            docker push $TAG
          fi
        done

  test-release:
    runs-on: ubuntu-latest
    needs: tag-and-release

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test released images
      run: |
        # Test the latest tag (always available)
        LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Testing latest tag: $LATEST_TAG"
        docker pull $LATEST_TAG
        docker run --rm $LATEST_TAG repomap-tool --help
        
        # Test the nightly image that was used as source
        NIGHTLY_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly"
        echo "Testing nightly tag: $NIGHTLY_TAG"
        docker pull $NIGHTLY_TAG
        docker run --rm $NIGHTLY_TAG repomap-tool --help
        
        # Test with a sample project using the latest tag
        mkdir -p test-release-project
        echo "print('Hello, World!')" > test-release-project/test.py
        
        # Run analysis on the test project
        docker run --rm \
          -v $(pwd)/test-release-project:/workspace \
          -w /workspace \
          $LATEST_TAG \
          repomap-tool analyze . --output-format json || true
        
        # If this is a release event with a tag, also test the versioned tag
        if [ -n "${{ github.event.release.tag_name }}" ]; then
          VERSION_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}"
          echo "Testing version tag: $VERSION_TAG"
          docker pull $VERSION_TAG
          docker run --rm $VERSION_TAG repomap-tool --help
        else
          echo "No release tag name available, skipping version tag test"
        fi

    - name: Cleanup
      run: |
        rm -rf test-release-project
