name: Release

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest

    - name: Get latest validated image
      id: get-image
      run: |
        # Get the most recent validated image from the registry
        # This assumes the docker-build workflow has already built and pushed a validated image
        LATEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Pull the latest image to ensure we have it locally
        docker pull $LATEST_IMAGE
        
        # Get the image digest for reference
        DIGEST=$(docker images --digests --format "table {{.Digest}}" | grep -v DIGEST | head -1)
        echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT
        echo "source_image=$LATEST_IMAGE" >> $GITHUB_OUTPUT

    - name: Tag and push release images
      run: |
        SOURCE_IMAGE="${{ steps.get-image.outputs.source_image }}"
        
        # Tag the validated image with release tags
        for TAG in ${{ steps.meta.outputs.tags }}; do
          echo "Tagging $SOURCE_IMAGE as $TAG"
          docker tag $SOURCE_IMAGE $TAG
          docker push $TAG
        done

  test-release:
    runs-on: ubuntu-latest
    needs: tag-and-release

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test released images
      run: |
        # Test the versioned release image (e.g., v1.2.3)
        VERSION_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}"
        docker pull $VERSION_TAG
        
        # Test basic functionality
        docker run --rm $VERSION_TAG repomap-tool --help
        
        # Test with a sample project
        mkdir -p test-release-project
        echo "print('Hello, World!')" > test-release-project/test.py
        
        # Run analysis on the test project
        docker run --rm \
          -v $(pwd)/test-release-project:/workspace \
          -w /workspace \
          $VERSION_TAG \
          repomap-tool analyze . --output-format json || true
        
        # Also test the latest tag
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest repomap-tool --help

    - name: Cleanup
      run: |
        rm -rf test-release-project
