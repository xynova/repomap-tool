name: Release

on:
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggering

# Concurrency control - cancel in-progress workflows from the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest

    - name: Get nightly validated image
      id: get-image
      run: |
        # Get the most recent validated nightly image from the registry
        NIGHTLY_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly"
        
        # Pull the nightly image (most recent nightly build)
        echo "Pulling nightly image: $NIGHTLY_IMAGE"
        if docker pull $NIGHTLY_IMAGE; then
          echo "‚úÖ Using nightly image: $NIGHTLY_IMAGE"
          echo "source_image=$NIGHTLY_IMAGE" >> $GITHUB_OUTPUT
        else
          echo "‚ùå No nightly image found. Cannot create release."
          echo "Please ensure a nightly build has completed successfully before creating a release."
          echo "You can manually trigger the docker-build workflow to create a nightly image."
          exit 1
        fi

    - name: Tag and push release images
      run: |
        SOURCE_IMAGE="${{ steps.get-image.outputs.source_image }}"
        
        # Tag the validated image with release tags
        echo "Available tags: ${{ steps.meta.outputs.tags }}"
        
        # Split the tags string (space-separated) and process each tag
        read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
        for TAG in "${TAGS[@]}"; do
          if [ -n "$TAG" ]; then
            echo "Tagging $SOURCE_IMAGE as $TAG"
            docker tag $SOURCE_IMAGE $TAG
            docker push $TAG
          fi
        done

  test-release:
    runs-on: ubuntu-latest
    needs: tag-and-release

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test released images
      run: |
        echo "üß™ Running comprehensive release Docker integration tests..."
        
        # Test the latest tag (always available)
        LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "üìã Testing latest tag: $LATEST_TAG"
        docker pull $LATEST_TAG
        docker run --rm $LATEST_TAG repomap-tool --help
        
        # Test the nightly image that was used as source
        NIGHTLY_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly"
        echo "üìã Testing nightly tag: $NIGHTLY_TAG"
        docker pull $NIGHTLY_TAG
        docker run --rm $NIGHTLY_TAG repomap-tool --help
        
        # Test 1: Small test project analysis
        echo "üìã Test 1: Small test project analysis"
        docker run --rm $LATEST_TAG bash -c "
          mkdir -p /tmp/release-test-project
          echo 'def hello_world():' > /tmp/release-test-project/test.py
          echo '    print(\"Hello, World!\")' >> /tmp/release-test-project/test.py
          echo 'class TestClass:' >> /tmp/release-test-project/test.py
          echo '    def __init__(self):' >> /tmp/release-test-project/test.py
          echo '        self.value = 42' >> /tmp/release-test-project/test.py
          cd /tmp/release-test-project
          repomap-tool analyze . --output json
        "
        
        # Test 2: Real codebase analysis
        echo "üìã Test 2: Real codebase analysis"
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool analyze /project --output json
        
        # Test 3: Search functionality
        echo "üìã Test 3: Search functionality"
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool search /project "analyze_project" --output json
        
        # Test 4: Fuzzy matching
        echo "üìã Test 4: Fuzzy matching"
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool search /project "FuzzyMatcher" --output json
        
        # Test 5: Semantic matching
        echo "üìã Test 5: Semantic matching"
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool search /project "semantic" --output json
        
        # If this is a release event with a tag, also test the versioned tag
        if [ -n "${{ github.event.release.tag_name }}" ]; then
          VERSION_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}"
          echo "üìã Testing version tag: $VERSION_TAG"
          docker pull $VERSION_TAG
          docker run --rm $VERSION_TAG repomap-tool --help
          
          # Test version tag with real codebase
          echo "üìã Test 6: Version tag real codebase analysis"
          docker run --rm \
            -v $(pwd):/project \
            $VERSION_TAG \
            repomap-tool analyze /project --output json
        else
          echo "No release tag name available, skipping version tag test"
        fi
        
        echo "‚úÖ All release Docker integration tests completed successfully!"

    - name: Run full release Docker test suite
      run: |
        echo "üß™ Running full release Docker test suite..."
        
        LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Make the test scripts executable
        chmod +x tests/integration/test_integrated_adaptive.sh
        chmod +x tests/integration/test_docker_real_codebase.sh
        
        # Test 7: Comprehensive real codebase analysis
        echo "üìã Test 7: Comprehensive real codebase analysis"
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool analyze /project --semantic --threshold 0.05 --verbose --output json
        
        # Test 8: Comprehensive search tests
        echo "üìã Test 8: Comprehensive search tests"
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool search /project "DockerRepoMap" --match-type hybrid --threshold 0.5 --verbose --output json
        
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool search /project "analyze_project" --match-type fuzzy --threshold 0.6 --verbose --output json
        
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool search /project "FuzzyMatcher" --match-type fuzzy --threshold 0.5 --verbose --output json
        
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool search /project "SemanticMatcher" --match-type fuzzy --threshold 0.5 --verbose --output json
        
        # Test 9: Advanced analysis modes
        echo "üìã Test 9: Advanced analysis modes"
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool analyze /project --fuzzy --threshold 0.6 --verbose --output json
        
        docker run --rm \
          -v $(pwd):/project \
          $LATEST_TAG \
          repomap-tool analyze /project --fuzzy --semantic --threshold 0.1 --verbose --output json
        
        echo "‚úÖ Full release Docker test suite completed successfully!"

    - name: Cleanup
      run: |
        echo "Cleanup completed"
