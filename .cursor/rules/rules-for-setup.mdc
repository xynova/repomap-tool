---
description: Setup rules for RepoMap-Tool with reasoning protocols
globs:
alwaysApply: true
keywords: [setup, venv, virtual environment, makefile, make install, make test-unit, make clean, existing setup, current setup, working software, dependencies, environment, activation, source venv, python path, test logic, infrastructure, rebuild, scratch, forbidden actions, required actions, existing tools, workflow, goal, remember, testing, correct command, wrong command]
---

# ü§ñ **AI REASONING PROTOCOL**

## **Before Taking Any Setup Action:**
**ALWAYS provide step-by-step reasoning that:**
1. States what setup action you're about to take
2. Explains which rules from this document apply
3. Shows how you've considered those rules in your approach
4. Outlines your specific plan and next steps

---

# AI Instructions: Use Existing Setup - NO NEW VENVS

## üö´ FORBIDDEN ACTIONS:
- **DO NOT** create new virtual environments
- **DO NOT** use `python3 -m venv` 
- **DO NOT** use `pip install --user`
- **DO NOT** create `test_venv` or similar
- **DO NOT** override existing dependencies

## ‚úÖ REQUIRED ACTIONS:
- **ALWAYS** use the existing `venv/` directory
- **ALWAYS** use `source venv/bin/activate` 
- **ALWAYS** use `make install` if dependencies are missing
- **ALWAYS** use `make test-unit` to run tests
- **ALWAYS** work with the current setup

### **Dependency Management Workflow:**
1.  **Modify `pyproject.toml`**: Add new runtime dependencies under `[project].dependencies` or development dependencies under `[project.optional-dependencies].dev`.
2.  **Activate Virtual Environment**: Run `source .venv/bin/activate`.
3.  **Install Dependencies**: Run `make install` (this will automatically use `uv` if available).

## üîß EXISTING TOOLS:
- **Makefile**: Contains all setup commands
- **venv/**: Existing virtual environment
- **make install**: Installs dependencies properly
- **make test-unit**: Runs unit tests
- **make clean**: Cleans up properly

## üìã WORKFLOW:
1. **Check existing setup**: `ls venv/`
2. **Activate existing venv**: `source venv/bin/activate`
3. **Install if needed**: `make install`
4. **Test**: `make test-unit`
5. **Fix issues in existing code, don't rebuild infrastructure**

## üéØ GOAL:
**Working software using current setup, not rebuilding from scratch.**

## ‚ö†Ô∏è REMEMBER:
- The user wants **working software**
- The user wants you to use the **current setup**
- The user does **NOT** want new virtual environments
- The user does **NOT** want dependency management changes
- **FIX THE ACTUAL PROBLEMS, don't change the environment**

## üîç WHEN TESTING:
- Use `source venv/bin/activate && make test-unit`
- If tests fail, fix the test logic, not the environment
- If dependencies missing, use `make install`
- **NEVER** create new venvs or change Python paths

## üí° EXAMPLE CORRECT COMMAND:
```bash
source venv/bin/activate && make test-unit
```

## ‚ùå EXAMPLE WRONG COMMAND:
```bash
python3 -m venv test_venv  # NEVER DO THIS
```
