[project]
name = "repomap-tool"
version = "0.1.0"
description = "CLI tool to map and analyze code repositories."
authors = [
    { name = "Hector", email = "hector@xynova.ai" }
]
dependencies = [
    "click>=8.1.7",
    "pyyaml>=6.0.1",
    "rich>=13.7.1",
    "tree-sitter>=0.20.0",
    "tree-sitter-languages>=1.2.0",
    "typer>=0.9.0",
    "dependency-injector[pydantic2]>=4.41.0",
    "networkx>=3.2.1",
    "pydantic>=2.5.3",
    "Jinja2>=3.1.3",
    "fuzzywuzzy>=0.18.0",
    "python-Levenshtein>=0.23.0",
    "pathspec>=0.11.2",
    "sentence-transformers>=2.2.2",
    "einops>=0.7.0",
    "scikit-learn>=1.3.2",
    "Pygments>=2.17.2",
    "chromadb>=0.4.22",
    "beautifulsoup4>=4.12.3",
    "openai>=1.6.1",
    "tiktoken>=0.5.2",
    "SQLAlchemy>=2.0.25",
    "psutil>=5.9.8",
    "platformdirs>=4.2.0",
    "python-dotenv>=1.0.1",
    "loguru>=0.7.2",
    "pydantic-settings>=2.2.1", # Add pydantic-settings
    "grep-ast>=0.1.0", # Add grep-ast
]
requires-python = ">=3.11,<3.12"
readme = "README.md"
license = { file = "LICENSE" }

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "black>=23.1.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.6.0",
    "ruff>=0.1.13",
    "types-pyyaml",
    "types-requests",
    "types-setuptools",
    "types-networkx",
    "types-psutil",
    "coverage>=7.4.0",
    "lxml>=4.9.4",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
    "mkdocstrings[python]>=0.24.0",
    "semgrep>=1.67.0",
    "bandit>=1.7.5",
    "bump-pydantic>=0.8.0",
    "pre-commit>=3.6.0",
    "build>=1.0.3",
    "twine>=4.0.2",
]

[tool.setuptools]
packages = ["repomap_tool"]
package-dir = {"" = "src"}

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_strict = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
addopts = "--cov=repomap_tool --cov-report=xml --cov-report=html --cov-report=term-missing --strict-markers -n auto -p no:warnings"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
pythonpath = ["src"]
markers = ["slow", "integration"]

[tool.coverage.run]
branch = true
omit = ["tests/*", "venv/*"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # Error
    "W",  # Warning
    "F",  # Pyflakes
    "C",  # Complexity
    "N",  # Naming
    "D",  # Docstrings
    "B",  # Bugbear
    "A",  # Builtin shadowing
    "T",  # flake8-annotations
    "UP", # pyupgrade
    "SIM",# Simpler expressions
    "ARG",# Unused arguments
    "ISC",# Implicit string concatenation
    "ICN",# import-conventions
    "PL", # Pylint
    "TRY",# Tryceratops
    "ERA",# eradicate
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "D203", # One-line docstring should not be on a separate line
    "D213", # Multi-line docstring summary should be on the first line
    "D406", # Section name should end with a period
    "D407", # Missing dashed underline after section header
    "D413", # Missing blank line after last section
    "E501", # Line too long (handled by black)
    "C901", # Too complex (handled by complexity rules)
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "PLR0913", # Too many arguments in function call
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "ERA001", # Found commented out code
    "TRY003", # Avoid specifying long messages outside the exception class
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 88

[tool.semgrep]
yaml_path = ".semgrep/rules.yaml"

[tool.semgrep.python]
patterns = [
    "no-ast-parse",
    "no-regex-code-parsing",
    "tree-sitter-direct-integration",
    "tree-sitter-get-tags-usage",
    "tree-sitter-parser-usage",
    "absolute-path-standardization",
    "centralized-config-service-usage",
    "no-hardcoded-config-values",
    "centralized-logging-service-usage",
    "no-direct-logging-getlogger",
    "output-manager-usage",
    "no-direct-console-print",
    "constructor-dependency-injection",
    "no-direct-service-instantiation",
    "dependency-validation",
    "formatter-protocol-implementation",
    "template-system-usage",
    "template-pattern-adherence",
    "config-driven-templates",
    "emoji-non-emoji-templates",
    "matcher-protocol-implementation",
    "matcher-multiple-strategies",
    "llm-token-budget-management",
    "code-exploration-session-management",
    "dependency-analysis-graph-representation",
    "caching-ttl-size-limits",
    "mvc-controller-pattern",
    "controllers-return-viewmodels",
    "viewmodels-template-based-formatters",
    "controllers-registered-in-di",
    "all-code-has-tests",
    "mypy-type-checking",
    "follow-existing-patterns",
    "no-new-service-factories",
    "python-code-standards",
    "python-dry-principles",
    "python-type-annotations",
    "python-pydantic-models",
    "python-error-handling",
    "python-utility-functions",
    "python-import-organization",
    "python-di-container-usage",
    "python-service-factory-cli",
    "python-di-validation",
    "python-console-di-pattern",
    "python-di-anti-patterns",
    "python-testable-code",
    "python-interface-design",
    "python-caching-interface"
]
